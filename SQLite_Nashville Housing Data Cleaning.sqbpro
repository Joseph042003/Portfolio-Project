/* 

Project: Cleaning Data using SQL Queries in SQLite 

Skills Used: Case Statement, CTE, Self-Join, Standardise Date and Extract Address using SSUBSTR and INSTR, 

				Aggregrate Functions, Delete rows using Unique RowId.
				
Files Used: NashvilleHousing

*/



	
-- Standardising Date from &quot;Month dd, yyyy&quot; format to &quot;yyyy-mm-dd&quot; format

	

UPDATE NashvilleHousing

SET SaleDate = 

    SUBSTR(SaleDate, INSTR(SaleDate, ',') + 2, 4) || '-' ||  

	-- Extracts the year: Locating the position of the comma and add 2 to get the position of the first number of year

	

    CASE 

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'January' THEN '01'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'February' THEN '02'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'March' THEN '03'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'April' THEN '04'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'May' THEN '05'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'June' THEN '06'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'July' THEN '07'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'August' THEN '08'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'September' THEN '09'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'October' THEN '10'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'November' THEN '11'

        WHEN SUBSTR(SaleDate, 1, INSTR(SaleDate, ' ') - 1) = 'December' THEN '12'

    END || '-' || 

	-- Extract the month: Locating the location of the first space and deducting 1 to get the ending position of the month portion

    

	SUBSTR(SaleDate, INSTR(SaleDate, ' ') + 1, INSTR(SaleDate, ',') - INSTR(SaleDate, ' ') - 1); 

	-- Extract the day: Locating the position of the space +1 and determining the difference between the space and comma - 1 to get the steps

	

	

-- Populate Property Address 


SELECT n1.ParcelID, n1.PropertyAddress, n2.ParcelID, n2.PropertyAddress, IFNULL(n1.PropertyAddress,n2.PropertyAddress)

FROM NashvilleHousing n1

JOIN NashvilleHousing n2 

	ON n1.ParcelID = n2.ParcelID

	AND n1.UniqueID != n2.UniqueID

WHERE n1.PropertyAddress IS NULL ;



UPDATE NashvilleHousing

SET PropertyAddress = 

	(SELECT n2.PropertyAddress

	FROM NashvilleHousing n1

	JOIN NashvilleHousing n2 

	ON n1.ParcelID = n2.ParcelID

	AND n1.UniqueID != n2.UniqueID

	WHERE n1.PropertyAddress IS NULL

	LIMIT 1

	)

WHERE PropertyAddress IS NULL;





-- Breaking Address into Individual Column (Address, City, State) using Substring

-- Address example: 109  CEDAR PLACE BND, NASHVILLE



SELECT SUBSTR(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1 ) AS Address , 

	   SUBSTR(PropertyAddress, INSTR(PropertyAddress, ',')+2) AS City

FROM NashvilleHousing;



-- Add new column and update table by extracting address from &quot;PropertyAddress&quot; column

ALTER TABLE NashvilleHousing

ADD Property_Split_Address TEXT; 



UPDATE NashvilleHousing

SET Property_Split_Address =  SUBSTR(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1 );





-- Add new column and update table by extracting city from &quot;PropertyAddress&quot; column

ALTER TABLE NashvilleHousing

ADD Property_City TEXT;



UPDATE NashvilleHousing

SET Property_City =  SUBSTR(PropertyAddress, INSTR(PropertyAddress, ',')+2);





-- Breaking Owner's Address into Individual Column

-- Using Common Table Expression (CTE)



WITH extractOwnerAddress AS (

	SELECT 

	OwnerAddress AS Full_address,

	SUBSTR(OwnerAddress, 1, INSTR(OwnerAddress, ',') - 1) AS street_Owner,

	SUBSTR(OwnerAddress, INSTR(OwnerAddress, ',') + 2, INSTR(SUBSTR(OwnerAddress, INSTR(OwnerAddress, ',') + 2), ',') - 1) AS city_Owner,

	SUBSTR(OwnerAddress, LENGTH(OwnerAddress) -1, 2) AS state_Owner

	FROM NashvilleHousing

)

SELECT Full_address, street_Owner, city_Owner, state_Owner

FROM extractOwnerAddress;



-- Add new column and update table by extracting address from &quot;OwnerAddress&quot; column

ALTER TABLE NashvilleHousing

ADD Owner_Street TEXT;



ALTER TABLE NashvilleHousing

ADD Owner_City TEXT;



ALTER TABLE NashvilleHousing

ADD Owner_State TEXT ;  



UPDATE NashvilleHousing

SET Owner_Street =  SUBSTR(OwnerAddress, 1, INSTR(OwnerAddress, ',') - 1);



UPDATE NashvilleHousing

SET Owner_City =  SUBSTR(OwnerAddress, INSTR(OwnerAddress, ',') + 2, INSTR(SUBSTR(OwnerAddress, INSTR(OwnerAddress, ',') + 2), ',') - 1);



UPDATE NashvilleHousing

SET Owner_State =  SUBSTR(OwnerAddress, LENGTH(OwnerAddress) -1, 2);





-- Standardise Y and N to Yes and NO in &quot;Sold as Vacant&quot; COLUMN

Select DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)

FROM NashvilleHousing

GROUP BY SoldAsVacant

ORDER BY 2 DESC;



SELECT SoldAsVacant,

	CASE 

		WHEN SoldAsVacant = 'Y' THEN 'Yes' 

		WHEN SoldAsVacant = 'N' THEN 'No' 

		ELSE 

		SoldAsVacant

	END	

FROM NashvilleHousing;



UPDATE NashvilleHousing

SET SoldAsVacant = 

	CASE 

		WHEN SoldAsVacant = 'Y' THEN 'Yes' 

		WHEN SoldAsVacant = 'N' THEN 'No' 

		ELSE 

		SoldAsVacant

	END	;

	

	

-- Remove Duplicates using CTE 

-- Checking Duplicates using multiple criteria

WITH row_numCTE AS (

SELECT *, ROW_NUMBER()

			  OVER(PARTITION BY ParcelID, 

								PropertyAddress,

								SalePrice,

								SaleDate,

								LegalReference

								ORDER BY UniqueID) row_num

FROM NashvilleHousing



)

SELECT *

FROM row_numCTE 

WHERE row_num &gt; 1;



-- Delete duplicates using unique rowid and CTE

WITH row_numCTE AS (

    SELECT 

        ROWID AS rowid,  -- Keep track of the row to delete

        ROW_NUMBER() OVER (

            PARTITION BY ParcelID, 

						 PropertyAddress, 

						 SalePrice, 

						 SaleDate, 

						 LegalReference

						 ORDER BY UniqueID

        ) AS row_num

    FROM NashvilleHousing

)

DELETE FROM NashvilleHousing

WHERE ROWID IN (

				SELECT rowid 

				FROM row_numCTE 

				WHERE row_num &gt; 1

);





-- Remove Unsed Columns 

ALTER TABLE NashvilleHousing

DROP COLUMN OwnerAddress;



ALTER TABLE NashvilleHousing

DROP COLUMN TaxDistrict;



ALTER TABLE NashvilleHousing

DROP COLUMN PropertyAddress;



